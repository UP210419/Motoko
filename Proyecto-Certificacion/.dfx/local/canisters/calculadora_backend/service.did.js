export const idlFactory = ({ IDL }) => {
  return IDL.Service({
    'abs' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'acosDegrees' : IDL.Func([IDL.Float64], [IDL.Opt(IDL.Float64)], []),
    'add' : IDL.Func([IDL.Float64, IDL.Float64], [IDL.Float64], []),
    'asinDegrees' : IDL.Func([IDL.Float64], [IDL.Opt(IDL.Float64)], []),
    'atanDegrees' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'atmospheresToPascals' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'binaryToDecimal' : IDL.Func([IDL.Nat], [IDL.Nat], []),
    'calculateFactorial' : IDL.Func([IDL.Nat], [IDL.Nat], []),
    'caloriesToJoules' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'cateto' : IDL.Func([IDL.Float64, IDL.Float64], [IDL.Float64], []),
    'celsiusToFahrenheit' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'celsiusToKelvin' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'combinations' : IDL.Func([IDL.Nat, IDL.Nat], [IDL.Nat], []),
    'convertDegreToRadians' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'convertRadianToRDegres' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'cosDegrees' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'daysToHours' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'decimalToBinary' : IDL.Func([IDL.Nat], [IDL.Nat], []),
    'decimalToOctal' : IDL.Func([IDL.Nat], [IDL.Nat], []),
    'divide' : IDL.Func([IDL.Float64, IDL.Float64], [IDL.Opt(IDL.Float64)], []),
    'exp' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'fahrenheitToCelsius' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'fahrenheitToKelvin' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'feetToMeters' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'gallonsToLiters' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'hoursToDays' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'hoursToMinutes' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'hypot' : IDL.Func([IDL.Float64, IDL.Float64], [IDL.Float64], []),
    'joulesToCalories' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'kelvinToCelsius' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'kilogramsToPounds' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'kmphToMph' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'litersToGallons' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'ln' : IDL.Func([IDL.Float64], [IDL.Opt(IDL.Float64)], []),
    'log' : IDL.Func([IDL.Float64], [IDL.Opt(IDL.Float64)], []),
    'logBase' : IDL.Func(
        [IDL.Float64, IDL.Float64],
        [IDL.Opt(IDL.Float64)],
        [],
      ),
    'metersToFeet' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'minutesToHours' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'minutesToSeconds' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'mphToKmph' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'multiply' : IDL.Func([IDL.Float64, IDL.Float64], [IDL.Float64], []),
    'nthRoot' : IDL.Func(
        [IDL.Float64, IDL.Float64],
        [IDL.Opt(IDL.Float64)],
        [],
      ),
    'octalToDecimal' : IDL.Func([IDL.Nat], [IDL.Nat], []),
    'partialFactorial' : IDL.Func([IDL.Nat, IDL.Nat], [IDL.Nat], []),
    'pascalsToAtmospheres' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'percentage' : IDL.Func([IDL.Float64, IDL.Float64], [IDL.Float64], []),
    'permutations' : IDL.Func([IDL.Nat, IDL.Nat], [IDL.Nat], []),
    'poundsToKilograms' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'power' : IDL.Func([IDL.Float64, IDL.Float64], [IDL.Float64], []),
    'quadraticFormula' : IDL.Func(
        [IDL.Float64, IDL.Float64, IDL.Float64],
        [IDL.Opt(IDL.Tuple(IDL.Float64, IDL.Float64))],
        [],
      ),
    'secondsToMinutes' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'sinDegrees' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'sqrt' : IDL.Func([IDL.Float64], [IDL.Opt(IDL.Float64)], []),
    'squareFeetToSquareMeters' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'squareMetersToSquareFeet' : IDL.Func([IDL.Float64], [IDL.Float64], []),
    'subtract' : IDL.Func([IDL.Float64, IDL.Float64], [IDL.Float64], []),
    'tanDegrees' : IDL.Func([IDL.Float64], [IDL.Float64], []),
  });
};
export const init = ({ IDL }) => { return []; };
